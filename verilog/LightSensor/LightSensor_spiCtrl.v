/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 0.99.1. DO NOT MODIFY.
*/
module LightSensor_spiCtrl
    ( // Inputs
      input  eta // clock
    , input  eta_0 // asynchronous reset: active high
    , input [10:0] eta_1 

      // Outputs
    , output wire [12:0] y 
    );
  reg [23:0] result;
  reg [23:0] \#tup_case_alt ;
  reg [23:0] \#tup_case_alt_0 ;
  wire [8:0] \#$sshiftBitInOutOut ;
  wire  ds4;
  reg [7:0] \#$sshiftBitInOutOut_app_arg ;
  reg [7:0] \#tup_app_arg ;
  wire  ds3;
  wire [9:0] \input' ;
  wire [7:0] buffer;
  wire  mosi;
  wire [2:0] counter;
  wire  cs;
  wire [7:0] dataOut;
  wire  nextOutput;
  wire  clkOut;
  wire  busyOut;
  wire [7:0] ds2;
  wire  miso1;
  wire [8:0] ds1;
  reg [23:0] eta_2;
  wire  \#tup_case_alt_selection_res ;
  wire  \#tup_case_alt_0_selection_res ;

  assign y = {{clkOut,cs,mosi}
             ,{dataOut,nextOutput,busyOut}};

  always @(*) begin
    case(counter)
      3'd7 : result = \#tup_case_alt ;
      default : result = {counter + 3'd1
                         ,\#$sshiftBitInOutOut 
                         ,1'b0
                         ,dataOut
                         ,1'b0
                         ,1'b1
                         ,1'b1};
    endcase
  end

  assign \#tup_case_alt_selection_res  = ds4 == (1'b0);

  always @(*) begin
    if(\#tup_case_alt_selection_res )
      \#tup_case_alt  = \#tup_case_alt_0 ;
    else
      \#tup_case_alt  = {3'd7
                        ,{buffer,mosi}
                        ,1'b0
                        ,dataOut
                        ,1'b0
                        ,1'b0
                        ,1'b1};
  end

  assign \#tup_case_alt_0_selection_res  = ds3 == (1'b0);

  always @(*) begin
    if(\#tup_case_alt_0_selection_res )
      \#tup_case_alt_0  = {3'd0
                          ,\#$sshiftBitInOutOut 
                          ,1'b0
                          ,\#tup_app_arg 
                          ,1'b1
                          ,1'b1
                          ,1'b1};
    else
      \#tup_case_alt_0  = {3'd7
                          ,{buffer,mosi}
                          ,1'b1
                          ,\#tup_app_arg 
                          ,1'b1
                          ,1'b0
                          ,1'b0};
  end

  LightSensor_shiftBitInOut LightSensor_shiftBitInOut_sshiftBitInOutOut
    ( .result (\#$sshiftBitInOutOut )
    , .eta (\#$sshiftBitInOutOut_app_arg )
    , .eta1 (miso1) );

  assign ds4 = \input' [0:0];

  always @(*) begin
    case(counter)
      3'd7 : \#$sshiftBitInOutOut_app_arg  = ds2;
      default : \#$sshiftBitInOutOut_app_arg  = buffer;
    endcase
  end

  // replaceBit start
  always @(*) begin
    \#tup_app_arg  = (buffer << (64'sd1));
    \#tup_app_arg [(64'sd0)] = miso1;
  end
  // replaceBit end

  assign ds3 = \input' [1:1];

  assign \input'  = eta_1[10:1];

  assign buffer = ds1[8:1];

  assign mosi = ds1[0:0];

  assign counter = eta_2[23:21];

  assign cs = eta_2[11:11];

  assign dataOut = eta_2[10:3];

  assign nextOutput = eta_2[2:2];

  assign clkOut = eta_2[1:1];

  assign busyOut = eta_2[0:0];

  assign ds2 = \input' [9:2];

  assign miso1 = eta_1[0:0];

  assign ds1 = eta_2[20:12];

  // register begin
  always @(posedge eta or posedge eta_0) begin : LightSensor_spiCtrl_register
    if (eta_0) begin
      eta_2 <= {3'd7,{8'b00000000,1'b1},1'b0,8'b00000000,1'b0,1'b0,1'b0};
    end else begin
      eta_2 <= result;
    end
  end
  // register end
endmodule

