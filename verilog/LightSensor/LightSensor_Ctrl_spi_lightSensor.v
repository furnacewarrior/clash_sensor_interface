/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 0.99.1. DO NOT MODIFY.
*/
module LightSensor_Ctrl_spi_lightSensor
    ( // Inputs
      input  clk // clock
    , input  rst // asynchronous reset: active high
    , input [19:0] \#arg  

      // Outputs
    , output wire [19:0] y 
    );
  reg [16:0] result;
  reg [16:0] \#tup_case_alt ;
  reg [16:0] result_0;
  wire [7:0] ds1;
  wire [2:0] stateL;
  reg [2:0] \#spi_lightSensor#_$jOut_app_arg ;
  wire [3:0] buffer;
  reg [16:0] state;
  wire  ds2;
  reg [2:0] \#spi_lightSensor#_$jOut_case_alt ;
  reg [2:0] \#spi_lightSensor#_$jOut_case_alt_0 ;
  reg [2:0] \#spi_lightSensor#_$jOut_case_alt_1 ;
  wire  sync;
  wire  finished;
  wire  \#spi_lightSensor#_$jOut_case_scrut ;
  wire [9:0] inputSensor1;
  wire [7:0] dataOut1;

  assign y = {{dataOut1,sync,1'b0}
             ,{8'b00000000,finished,1'b0}};

  always @(*) begin
    case(stateL)
      3'b000 : result = \#tup_case_alt ;
      3'b001 : result = \#tup_case_alt ;
      3'b010 : result = result_0;
      3'b011 : result = \#tup_case_alt ;
      3'b100 : result = result_0;
      default : result = {17 {1'bx}};
    endcase
  end

  always @(*) begin
    if(\#spi_lightSensor#_$jOut_case_scrut )
      \#tup_case_alt  = result_0;
    else
      \#tup_case_alt  = result_0;
  end

  always @(*) begin
    case(\#spi_lightSensor#_$jOut_app_arg )
      3'b000 : result_0 = {buffer
                          ,\#spi_lightSensor#_$jOut_app_arg 
                          ,dataOut1
                          ,1'b0
                          ,1'b0};
      3'b001 : result_0 = {buffer
                          ,\#spi_lightSensor#_$jOut_app_arg 
                          ,dataOut1
                          ,1'b0
                          ,1'b0};
      3'b010 : result_0 = {ds1[3 : 0]
                          ,\#spi_lightSensor#_$jOut_app_arg 
                          ,dataOut1
                          ,1'b0
                          ,1'b0};
      3'b011 : result_0 = {buffer
                          ,\#spi_lightSensor#_$jOut_app_arg 
                          ,dataOut1
                          ,1'b0
                          ,1'b1};
      3'b100 : result_0 = {buffer
                          ,\#spi_lightSensor#_$jOut_app_arg 
                          ,{buffer,(ds1[7 : 4])}
                          ,1'b1
                          ,1'b0};
      default : result_0 = {17 {1'bx}};
    endcase
  end

  assign ds1 = inputSensor1[9:2];

  assign stateL = state[12:10];

  always @(*) begin
    case(stateL)
      3'b000 : \#spi_lightSensor#_$jOut_app_arg  = \#spi_lightSensor#_$jOut_case_alt ;
      3'b001 : \#spi_lightSensor#_$jOut_app_arg  = \#spi_lightSensor#_$jOut_case_alt_0 ;
      3'b010 : \#spi_lightSensor#_$jOut_app_arg  = 3'b011;
      3'b011 : \#spi_lightSensor#_$jOut_app_arg  = \#spi_lightSensor#_$jOut_case_alt_1 ;
      default : \#spi_lightSensor#_$jOut_app_arg  = 3'b000;
    endcase
  end

  assign buffer = state[16:13];

  // register begin
  always @(posedge clk or posedge rst) begin : LightSensor_Ctrl_spi_lightSensor_register
    if (rst) begin
      state <= {4'b0000,3'b000,8'b00000000,1'b0,1'b0};
    end else begin
      state <= result;
    end
  end
  // register end

  assign ds2 = inputSensor1[1:1];

  always @(*) begin
    if(\#spi_lightSensor#_$jOut_case_scrut )
      \#spi_lightSensor#_$jOut_case_alt  = 3'b001;
    else
      \#spi_lightSensor#_$jOut_case_alt  = 3'b000;
  end

  always @(*) begin
    if(\#spi_lightSensor#_$jOut_case_scrut )
      \#spi_lightSensor#_$jOut_case_alt_0  = 3'b010;
    else
      \#spi_lightSensor#_$jOut_case_alt_0  = 3'b001;
  end

  always @(*) begin
    if(\#spi_lightSensor#_$jOut_case_scrut )
      \#spi_lightSensor#_$jOut_case_alt_1  = 3'b100;
    else
      \#spi_lightSensor#_$jOut_case_alt_1  = 3'b011;
  end

  assign sync = state[1:1];

  assign finished = state[0:0];

  assign \#spi_lightSensor#_$jOut_case_scrut  = ds2 == (1'b1);

  assign inputSensor1 = \#arg [9:0];

  assign dataOut1 = state[9:2];
endmodule

