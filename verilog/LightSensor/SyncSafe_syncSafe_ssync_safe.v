/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 0.99.1. DO NOT MODIFY.
*/
module SyncSafe_syncSafe_ssync_safe
    ( // Inputs
      input  clkA // clock
    , input  rstA // asynchronous reset: active high
    , input  clkB // clock
    , input  rstB // asynchronous reset: active high
    , input [9:0] ds 

      // Outputs
    , output wire [9:0] result 
    );
  wire  busy;
  wire  sync;
  wire [7:0] message;
  reg  \sync' ;
  wire  syncEn;
  wire  busyOut;
  reg  result_0;
  reg  f2;
  reg  result_1;
  wire  x;
  reg  result_2;
  reg  x_0;
  reg  \#feedback_app_arg ;
  reg  result_3;
  wire  x_1;
  reg  \#syncEn'_app_arg ;
  reg  \#app_arg ;
  reg  result_4;
  reg  x_2;
  reg  \#x_app_arg ;
  reg [7:0] \#app_arg_0 ;
  reg [7:0] \#app_arg_1 ;
  wire [1:0] \#app_arg_2 ;
  wire  \#app_arg_3 ;
  wire  \#app_arg_4 ;
  wire [1:0] \#app_arg_5 ;
  wire  result_2_selection_res;
  wire signed [63:0] \#i ;
  wire signed [63:0] \#i_0 ;
  wire signed [63:0] \#i_1 ;
  wire signed [63:0] \#i_2 ;

  assign busy = ds[0:0];

  assign sync = ds[1:1];

  assign message = ds[9:2];

  assign result = {\#app_arg_0 
                  ,result_4
                  ,\#app_arg };

  // register begin
  always @(posedge clkA or posedge rstA) begin : SyncSafe_syncSafe_ssync_safe_register
    if (rstA) begin
      \sync'  <= 1'b0;
    end else begin
      \sync'  <= result_0;
    end
  end
  // register end

  assign syncEn = ((sync) == 1'b1) & (~ busyOut);

  assign busyOut = result_1 | \sync' ;

  always @(*) begin
    if(syncEn)
      result_0 = 1'b1;
    else
      result_0 = f2;
  end

  always @(*) begin
    if(result_1)
      f2 = 1'b0;
    else
      f2 = \sync' ;
  end

  // register begin
  always @(posedge clkA or posedge rstA) begin : SyncSafe_syncSafe_ssync_safe_register_0
    if (rstA) begin
      result_1 <= 1'b0;
    end else begin
      result_1 <= \#feedback_app_arg ;
    end
  end
  // register end

  assign x = result_2;

  assign result_2_selection_res = (x_0) == 1'b1;

  always @(*) begin
    if(result_2_selection_res)
      result_2 = 1'b1;
    else
      result_2 = result_3;
  end

  // register begin
  always @(posedge clkB or posedge rstB) begin : SyncSafe_syncSafe_ssync_safe_register_1
    if (rstB) begin
      x_0 <= (1'b0);
    end else begin
      x_0 <= busy;
    end
  end
  // register end

  // register begin
  always @(posedge clkA or posedge rstA) begin : SyncSafe_syncSafe_ssync_safe_register_2
    if (rstA) begin
      \#feedback_app_arg  <= 1'b0;
    end else begin
      \#feedback_app_arg  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge clkB or posedge rstB) begin : SyncSafe_syncSafe_ssync_safe_register_3
    if (rstB) begin
      result_3 <= 1'b0;
    end else begin
      result_3 <= \#syncEn'_app_arg ;
    end
  end
  // register end

  assign x_1 = \sync' ;

  // register begin
  always @(posedge clkB or posedge rstB) begin : SyncSafe_syncSafe_ssync_safe_register_4
    if (rstB) begin
      \#syncEn'_app_arg  <= 1'b0;
    end else begin
      \#syncEn'_app_arg  <= x_1;
    end
  end
  // register end

  assign \#i  = 64'sd0;

  assign \#i_0  = 64'sd1;

  always @(*) begin
    if(busyOut)
      \#app_arg  = 1'b1;
    else
      \#app_arg  = 1'b0;
  end

  assign \#i_1  = 64'sd0;

  assign \#i_2  = 64'sd1;

  always @(*) begin
    if(x_2)
      result_4 = 1'b1;
    else
      result_4 = 1'b0;
  end

  // register begin
  always @(posedge clkB or posedge rstB) begin : SyncSafe_syncSafe_ssync_safe_register_5
    if (rstB) begin
      x_2 <= 1'b0;
    end else begin
      x_2 <= ((~ \#x_app_arg ) & result_3);
    end
  end
  // register end

  // register begin
  always @(posedge clkB or posedge rstB) begin : SyncSafe_syncSafe_ssync_safe_register_6
    if (rstB) begin
      \#x_app_arg  <= 1'b0;
    end else begin
      \#x_app_arg  <= result_3;
    end
  end
  // register end

  // register begin
  always @(posedge \#app_arg_5 [1] or posedge rstB) begin : SyncSafe_syncSafe_ssync_safe_register_7
    if (rstB) begin
      \#app_arg_0  <= 8'b00000000;
    end else if (\#app_arg_5 [0]) begin
      \#app_arg_0  <= (\#app_arg_1 );
    end
  end
  // register end

  // register begin
  always @(posedge \#app_arg_2 [1] or posedge rstA) begin : SyncSafe_syncSafe_ssync_safe_register_8
    if (rstA) begin
      \#app_arg_1  <= 8'b00000000;
    end else if (\#app_arg_2 [0]) begin
      \#app_arg_1  <= message;
    end
  end
  // register end

  // clockGate begin 
  assign \#app_arg_2  = {clkA,syncEn};
  // clockGate end

  assign \#app_arg_3  = {1 {1'bx}};

  assign \#app_arg_4  = {1 {1'bx}};

  // clockGate begin 
  assign \#app_arg_5  = {clkB,result_3};
  // clockGate end
endmodule

